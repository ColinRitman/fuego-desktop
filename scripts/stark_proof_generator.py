#!/usr/bin/env python3
"""
STARK Proof Generator for Fuego Wallet
Automatically generates STARK proofs and performs Eldernode verification for burn transactions
"""

import json
import os
import sys
import subprocess
import tempfile
from pathlib import Path
from datetime import datetime

class StarkProofGenerator:
    def __init__(self):
        self.cli_path = self._find_cli_executable()
        self.temp_dir = Path(tempfile.gettempdir()) / "fuego-stark-proofs"
        self.temp_dir.mkdir(exist_ok=True)
        
    def _find_cli_executable(self):
        """Find the xfg-stark-cli executable"""
        # Check common locations
        possible_paths = [
            "./xfg-stark-cli",
            "../xfgwin/target/debug/xfg-stark-cli",
            "/usr/local/bin/xfg-stark-cli",
            os.path.expanduser("~/fuegowalletproof/xfgwin/target/debug/xfg-stark-cli")
        ]
        
        for path in possible_paths:
            if os.path.exists(path) and os.access(path, os.X_OK):
                return path
                
        raise FileNotFoundError("xfg-stark-cli executable not found")
    
    def is_burn_transaction(self, transaction_hash, amount):
        """Check if this is a burn transaction that needs STARK proof"""
        # For now, consider any transaction with amount > 0 as potential burn
        # In a real implementation, you'd check transaction type/extra data
        return amount > 0 and transaction_hash and len(transaction_hash) == 64
    
    def create_package(self, transaction_hash, recipient_address, burn_amount, block_height=0):
        """Create a data package for STARK proof generation"""
        package = {
            "burn_transaction": {
                "transaction_hash": transaction_hash,
                "burn_amount_xfg": burn_amount,
                "block_height": block_height
            },
            "recipient": {
                "ethereum_address": recipient_address
            },
            "secret": {
                "secret_key": ""  # Will be generated by CLI
            },
            "metadata": {
                "created_at": datetime.utcnow().isoformat(),
                "description": f"Auto-generated for burn transaction {transaction_hash}"
            }
        }
        return package
    
    def generate_proof(self, transaction_hash, recipient_address, burn_amount, block_height=0):
        """Generate STARK proof for a burn transaction"""
        try:
            print("Step 1: Generating STARK proof...")
            
            # Create package file
            package = self.create_package(transaction_hash, recipient_address, burn_amount, block_height)
            package_file = self.temp_dir / f"package_{transaction_hash}.json"
            proof_file = self.temp_dir / f"proof_{transaction_hash}.json"
            
            # Save package to file
            with open(package_file, 'w') as f:
                json.dump(package, f, indent=2)
            
            # Run the CLI
            cmd = [
                self.cli_path,
                "generate",
                str(package_file),
                str(proof_file)
            ]
            
            print(f"Running: {' '.join(cmd)}")
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print(f"‚úÖ STARK proof generated successfully: {proof_file}")
                return {
                    "success": True,
                    "proof_file": str(proof_file),
                    "package_file": str(package_file)
                }
            else:
                print(f"‚ùå STARK proof generation failed:")
                print(f"Error: {result.stderr}")
                return {
                    "success": False,
                    "error": result.stderr
                }
                
        except subprocess.TimeoutExpired:
            error_msg = "Proof generation timed out after 5 minutes"
            print(f"‚ùå {error_msg}")
            return {"success": False, "error": error_msg}
        except Exception as e:
            error_msg = f"Unexpected error: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {"success": False, "error": error_msg}
    
    def eldernode_verify(self, transaction_hash, burn_amount):
        """Perform Eldernode verification of the burn transaction"""
        try:
            print("Step 2: Eldernode verification...")
            
            # Create verification package
            verification_data = {
                "burn_transaction": {
                    "transaction_hash": transaction_hash,
                    "burn_amount_xfg": burn_amount
                },
                "verification": {
                    "requested_at": datetime.utcnow().isoformat(),
                    "status": "pending"
                }
            }
            
            verification_file = self.temp_dir / f"verification_{transaction_hash}.json"
            
            with open(verification_file, 'w') as f:
                json.dump(verification_data, f, indent=2)
            
            print(f"Created verification package: {verification_file}")
            
            # Run Eldernode verification using CLI
            cmd = [
                self.cli_path,
                "eldernode-verify",
                str(verification_file)
            ]
            
            print(f"Contacting Eldernodes: {' '.join(cmd)}")
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("‚úÖ Eldernode verification completed successfully!")
                print("Burn transaction verified by Eldernode network")
                return {
                    "success": True,
                    "verification_file": str(verification_file)
                }
            else:
                print(f"‚ùå Eldernode verification failed:")
                print(f"Error: {result.stderr}")
                return {
                    "success": False,
                    "error": result.stderr
                }
                
        except subprocess.TimeoutExpired:
            error_msg = "Eldernode verification timed out after 5 minutes"
            print(f"‚ùå {error_msg}")
            return {"success": False, "error": error_msg}
        except Exception as e:
            error_msg = f"Unexpected error during Eldernode verification: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {"success": False, "error": error_msg}
    
    def create_complete_package(self, transaction_hash, recipient_address, burn_amount, proof_file):
        """Create complete proof package ready for HEAT minting"""
        try:
            print("Step 3: Creating complete proof package for HEAT minting...")
            
            complete_package = {
                "burn_transaction": {
                    "transaction_hash": transaction_hash,
                    "burn_amount_xfg": burn_amount
                },
                "recipient": {
                    "ethereum_address": recipient_address
                },
                "stark_proof": {
                    "file": str(proof_file),
                    "generated_at": datetime.utcnow().isoformat()
                },
                "eldernode_verification": {
                    "status": "verified",
                    "verified_at": datetime.utcnow().isoformat()
                },
                "heat_mint_ready": True,
                "metadata": {
                    "created_at": datetime.utcnow().isoformat(),
                    "description": "Complete proof package ready for HEAT minting"
                }
            }
            
            complete_file = self.temp_dir / f"complete_{transaction_hash}.json"
            
            with open(complete_file, 'w') as f:
                json.dump(complete_package, f, indent=2)
            
            print(f"‚úÖ Complete proof package created: {complete_file}")
            print("üéâ Ready for HEAT minting!")
            print("Next step: Use this package to mint HEAT tokens on Ethereum")
            
            return {
                "success": True,
                "complete_file": str(complete_file)
            }
            
        except Exception as e:
            error_msg = f"Failed to create complete package: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {"success": False, "error": error_msg}
    
    def process_burn_to_heat(self, transaction_hash, recipient_address, burn_amount, block_height=0):
        """Complete process from burn transaction to HEAT minting ready"""
        print("üî• Starting complete XFG burn to HEAT mint process...")
        print(f"Transaction: {transaction_hash}")
        print(f"Recipient: {recipient_address}")
        print(f"Amount: {burn_amount} XFG")
        
        # Step 1: Generate STARK proof
        proof_result = self.generate_proof(transaction_hash, recipient_address, burn_amount, block_height)
        if not proof_result["success"]:
            print("‚ùå STARK proof generation failed - stopping process")
            return proof_result
        
        # Step 2: Eldernode verification
        verification_result = self.eldernode_verify(transaction_hash, burn_amount)
        if not verification_result["success"]:
            print("‚ùå Eldernode verification failed - stopping process")
            return verification_result
        
        # Step 3: Create complete package
        complete_result = self.create_complete_package(
            transaction_hash, 
            recipient_address, 
            burn_amount, 
            proof_result["proof_file"]
        )
        
        if complete_result["success"]:
            print("üéâ Complete XFG burn to HEAT mint process completed successfully!")
            print(f"All files saved in: {self.temp_dir}")
        
        return complete_result
    
    def cleanup_old_files(self, max_age_hours=24):
        """Clean up old proof files"""
        cutoff_time = datetime.now().timestamp() - (max_age_hours * 3600)
        
        for file_path in self.temp_dir.glob("*"):
            if file_path.is_file():
                if file_path.stat().st_mtime < cutoff_time:
                    file_path.unlink()
                    print(f"Cleaned up old file: {file_path}")

def main():
    """Main function for command-line usage"""
    if len(sys.argv) < 4:
        print("Usage: python stark_proof_generator.py <transaction_hash> <recipient_address> <burn_amount> [block_height]")
        print("")
        print("Process:")
        print("  1. Generate STARK proof")
        print("  2. Eldernode verification")
        print("  3. Create complete package for HEAT minting")
        sys.exit(1)
    
    transaction_hash = sys.argv[1]
    recipient_address = sys.argv[2]
    burn_amount = int(sys.argv[3])
    block_height = int(sys.argv[4]) if len(sys.argv) > 4 else 0
    
    generator = StarkProofGenerator()
    
    if not generator.is_burn_transaction(transaction_hash, burn_amount):
        print("‚ùå This doesn't appear to be a burn transaction")
        sys.exit(1)
    
    result = generator.process_burn_to_heat(transaction_hash, recipient_address, burn_amount, block_height)
    
    if result["success"]:
        print("üéâ Complete process completed successfully!")
        print(f"Complete package: {result['complete_file']}")
        sys.exit(0)
    else:
        print(f"üí• Process failed: {result['error']}")
        sys.exit(1)

if __name__ == "__main__":
    main()
